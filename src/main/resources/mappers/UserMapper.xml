<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="me.soo.helloworld.mapper.UserMapper">
    <insert id="insertUser" parameterType="me.soo.helloworld.model.user.User">

        INSERT INTO users(userId, password, email, gender, birthday, originCountry, livingCountry, livingTown, aboutMe,
                            profileImageName, profileImagePath)
        VALUES(#{userId}, #{password}, #{email}, #{gender}, #{birthday}, #{originCountry}, #{livingCountry}, #{livingTown},
               #{aboutMe}, #{profileImageName}, #{profileImagePath})

    </insert>

    <select id="isUserIdExist" parameterType="String" resultType="boolean">
        SELECT EXISTS (SELECT userId FROM users WHERE userId = #{userId})
    </select>

    <resultMap id="getUserLoginData" type="me.soo.helloworld.model.user.UserLoginData">
        <constructor>
            <arg column="userId" javaType="String"/>
            <arg column="password" javaType="String"/>
            <arg column="token" javaType="String"/>
        </constructor>
        <result property="userId" column="userId"/>
        <result property="password" column="password"/>
        <result property="token" column="token"/>
    </resultMap>

    <select id="getUserLoginDataById"
            parameterType="String" resultMap="getUserLoginData">

        SELECT
            u.userId AS userId,
            u.password AS password,
            t.token AS token
        FROM users AS u
            LEFT OUTER JOIN tokens AS t on u.userId = t.userId
        WHERE u.userId = #{userId} AND isDeactivated = 'N';
    </select>

    <select id="getTestUserLoginDataById"
            parameterType="String" resultType="me.soo.helloworld.model.user.TestUserLoginData">

        SELECT
            userId,
            password
        FROM users AS u
        WHERE userId = #{userId} AND isDeactivated = 'N';
    </select>

    <select id="getUserProfileImageById"
            parameterType="String" resultType="me.soo.helloworld.model.file.FileData">
        SELECT profileImageName, profileImagePath FROM users WHERE userId = #{userId}
    </select>

    <update id="updateUserPassword" parameterType="map">
        UPDATE users SET password = #{password} WHERE userId = #{userId}
    </update>

    <update id="updateUserInfo" parameterType="map">

        UPDATE users SET gender = #{updateRequest.gender}, livingCountry = #{updateRequest.livingCountry},
                         livingTown = #{updateRequest.livingTown}, aboutMe = #{updateRequest.aboutMe}
            WHERE userId = #{userId}
    </update>

    <update id="updateUserProfileImage" parameterType="map">

        UPDATE users SET profileImageName = #{profileImage.fileName}, profileImagePath = #{profileImage.filePath}
            WHERE userId = #{userId}
    </update>

    <select id="getUserPasswordById" parameterType="String" resultType="String">
        SELECT password FROM users WHERE userId = #{userId}
    </select>

    <update id="deleteUser" parameterType="String">
        UPDATE users SET isDeactivated = 'Y' WHERE userId = #{userId}
    </update>

    <select id="isEmailValid" parameterType="me.soo.helloworld.model.user.UserFindPasswordRequest" resultType="boolean">
        SELECT EXISTS(SELECT email FROM users WHERE userId = #{userId} AND email = #{email} AND isDeactivated = 'N')
    </select>

    <select id="isUserActivated" parameterType="String" resultType="boolean">
        SELECT EXISTS (SELECT userId FROM users WHERE userId = #{userId} AND isDeactivated = 'N')
    </select>

</mapper>